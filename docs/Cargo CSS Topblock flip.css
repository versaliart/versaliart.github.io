/* v1.4 */

/* ======= Topflip: Example-Style Y Flip (appearance only) ======= */
/* Tweakables */
.flip-section{
  --flip-duration: 0.6s;
  --flip-ease: cubic-bezier(.2,.7,.2,1);
  --flip-perspective: 62.5rem;            /* = 1000px at 16px base */
  --card-w: 11.25rem;                     /* = 180px */
  --card-h: 15rem;                        /* = 240px */
  --front-bg: #2196F3;
  --back-bg:  rgb(220,220,220);
  --circle-size: 6.25rem;                 /* = 100px */
  --shadow-lg: 0 1.1875rem 2.375rem rgba(0,0,0,0.20), 0 0.9375rem 0.75rem rgba(0,0,0,0.12);
}

/* The top block acts as the perspective container */
.flip-section .flip-top{
  position: relative;
  perspective: var(--flip-perspective);
  /* Let clicks pass through except where we explicitly re-enable them on the card */
  pointer-events: none;
  /* stacking as you had */
  z-index: 999 !important;
}

/* The “card” stack you flip (name-agnostic so it works with your DOM) */
.flip-section .flip-top .flip,
.flip-section .flip-top .flip-card{
  width: var(--card-w);
  height: var(--card-h);
  transform-style: preserve-3d;
  position: relative;
  transition: transform var(--flip-duration) var(--flip-ease);
  pointer-events: auto; /* re-enable on the flipping element itself */
}

/* Faces */
.flip-section .flip-top .front,
.flip-section .flip-top .back{
  width: 100%;
  height: 100%;
  position: absolute;
  inset: 0;
  backface-visibility: hidden;
  overflow: hidden;
  border-radius: .5rem; /* optional polish */
}

/* Front above back by default – like the example */
.flip-section .flip-top .front{
  z-index: 2;
  transform: rotateY(0deg);
  background: var(--front-bg);
}

/* Back is reversed */
.flip-section .flip-top .back{
  transform: rotateY(180deg);
  background: var(--back-bg);
}

/* “Circle” accent (optional — matches the example motif) */
.flip-section .flip-top .circle{
  position: absolute;
  width: var(--circle-size);
  height: var(--circle-size);
  border-radius: 9999rem;
  background: #fff;
  box-shadow: var(--shadow-lg);
}

/* Position helpers matching the example’s left/right variants */
.flip-section .flip-top .front-left .circle{ right: calc(-.5 * var(--circle-size)); top: 50%; transform: translateY(-50%); }
.flip-section .flip-top .front-right .circle{ left:  calc(-.5 * var(--circle-size)); top: 50%; transform: translateY(-50%); }

.flip-section .flip-top .back-left img{ position:absolute; left:0; width: calc(2 * var(--card-w)); height: var(--card-h); object-fit: cover; }
.flip-section .flip-top .back-right img{ position:absolute; right:0; width: calc(2 * var(--card-w)); height: var(--card-h); object-fit: cover; }

/* ---------------------------
   FLIP STATES (APPEARANCE)
   We support multiple flags so your existing JS keeps working.
   - .is-flipped            → default rightward 180°
   - .is-flipped-right      → rightward 180°
   - .is-flipped-left       → leftward  -180°
   - :hover (for quick testing in editor)
----------------------------*/

/* Rightward flip (like example .flip-right) */
.flip-section .flip-top:is(.is-flipped, .is-flipped-right) .flip,
.flip-section .flip-top:is(.is-flipped, .is-flipped-right) .flip-card{
  transform: rotateY(180deg);
}

/* Leftward flip (like example .flip-left) */
.flip-section .flip-top.is-flipped-left .flip,
.flip-section .flip-top.is-flipped-left .flip-card{
  transform: rotateY(-180deg);
}

/* Optional: keep hover-to-preview without changing your triggers */
.flip-section .flip-top:hover .flip,
.flip-section .flip-top:hover .flip-card{
  /* Comment out this next line if hover preview is not desired on your page */
  /* transform: rotateY(180deg); */
}

/* Timing polish: first flip feels a hair slower on the initial movement */
.flip-section .flip-top .flip,
.flip-section .flip-top .flip-card{
  transition-property: transform;
  transition-duration: var(--flip-duration);
  transition-timing-function: var(--flip-ease);
}

/* Accessibility: reduce motion if user prefers */
@media (prefers-reduced-motion: reduce){
  .flip-section .flip-top .flip,
  .flip-section .flip-top .flip-card{
    transition-duration: .01ms;
  }
}

<script>
/* ===== Multi-Flip setup for only this section ===== */
(function(){
  function closestSection(el){
    while(el && el!==document.body){
      if(el.matches('.page-section, [data-section-id], section')) return el;
      el = el.parentElement;
    }
    return null;
  }
  function ready(fn){
    if(document.readyState!=='loading') fn();
    else document.addEventListener('DOMContentLoaded', fn, {once:true});
  }

  ready(function(){
    var scriptEl = document.currentScript;
    var section = closestSection(scriptEl);
    if(!section) return;
    section.classList.add('flip-section');

    // Find every Image Block in this section marked as a Top Block
    var blocks = Array.from(section.querySelectorAll('.sqs-block.image-block'))
      .filter(function(blk){ return !!blk.querySelector('a[href="#flip-top"]'); });

    if(!blocks.length){
      console.warn('FlipTop: No Image Blocks with href="#flip-top" in this section.');
      return;
    }

    blocks.forEach(function(block){
      if(block.__flipReady) return; // idempotent
      block.__flipReady = true;
      block.classList.add('flip-top');

      // Build flip DOM: .flip-inner > (.flip-front [original content], .flip-back [empty])
      var inner = document.createElement('div'); inner.className = 'flip-inner';
      var front = document.createElement('div'); front.className = 'flip-front';
      var back  = document.createElement('div'); back.className  = 'flip-back';

      while(block.firstChild){ front.appendChild(block.firstChild); }
      inner.appendChild(front); inner.appendChild(back);
      block.appendChild(inner);

      // Use the marker link as a trigger; never navigate
      var marker = front.querySelector('a[href="#flip-top"]');
      if(marker){
        marker.addEventListener('click', function(e){
          e.preventDefault(); e.stopPropagation();
          if (matchMedia('(hover: none), (pointer: coarse)').matches) {
            block.classList.add('is-flipped'); // mobile tap → flip this block only
          }
        }, true);
      }

      // Also allow tapping anywhere on the Top Block (mobile) to flip
      block.addEventListener('click', function(){
        if (matchMedia('(hover: none), (pointer: coarse)').matches) {
          block.classList.add('is-flipped');
        }
      }, true);

      // Auto-reset when the block scrolls off-screen
      if('IntersectionObserver' in window){
        var io = new IntersectionObserver(function(entries){
          entries.forEach(function(entry){
            if(!entry.isIntersecting){ block.classList.remove('is-flipped'); }
          });
        }, {threshold: 0.05});
        io.observe(block);
      }
    });

    // Mobile convenience: tap blank space in the section to reset all flipped blocks
    section.addEventListener('click', function(e){
      if (!(matchMedia('(hover: none), (pointer: coarse)').matches)) return;
      if (!e.target.closest('a, button, [role="button"]')) {
        section.querySelectorAll('.flip-top.is-flipped').forEach(function(b){
          b.classList.remove('is-flipped');
        });
      }
    });
  });
})();
</script>
